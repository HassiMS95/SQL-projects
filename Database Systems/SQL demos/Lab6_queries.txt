-- Query 1
SELECT P_CODE, P_PRICE
FROM PRODUCT
WHERE P_PRICE >= (SELECT AVG (P_PRICE) FROM PRODUCT);
-- Optimized query with an index on the P_PRICE column
CREATE INDEX P_PRICE_IDX ON PRODUCT (P_PRICE);
SELECT P_CODE, P_PRICE
FROM PRODUCT
WHERE P_PRICE >= (SELECT AVG (P_PRICE) FROM PRODUCT);

-- Query 2
SELECT P_CODE, SUM(LINE_UNITS)
FROM LINE
GROUP BY P_CODE
HAVING SUM(LINE_UNITS) > (SELECT MAX(LINE_UNITS) FROM LINE);
-- Optimized query with an index on P_CODE in the LINE table
CREATE INDEX idx_line_pcode ON LINE (P_CODE);
SELECT P_CODE, SUM(LINE_UNITS)
FROM LINE
GROUP BY P_CODE
HAVING SUM(LINE_UNITS) > (SELECT MAX(LINE_UNITS) FROM LINE);

-- Query 3
SELECT P_CODE, P_QOH * P_PRICE
FROM PRODUCT
WHERE P_QOH * P_PRICE > (SELECT AVG (P_QOH*P_PRICE) FROM PRODUCT)
-- Optimized query with one pass over the PRODUCT Table using a CTE value over PRODUCT table
WITH cte AS (
    SELECT P_CODE, P_QOH, P_PRICE, P_QOH * P_PRICE AS total_value
    FROM PRODUCT
)
SELECT P_CODE, total_value
FROM cte
WHERE total_value > (SELECT AVG(total_value) FROM cte);

-- Query 4
SELECT V_CODE, V_NAME, V_STATE
FROM VENDOR
WHERE V_STATE = 'TN'
ORDER BY V_NAME;
-- Optimized query with an index on the V_STATE column
CREATE INDEX V_STATE_IDX ON VENDOR (V_STATE);
SELECT V_CODE, V_NAME, V_STATE
FROM VENDOR
WHERE V_STATE = 'TN'
ORDER BY V_NAME;

-- Query 5
SELECT P_CODE, P_DESCRIPT, P_PRICE, P.V_CODE, V_STATE
FROM PRODUCT P, VENDOR V
WHERE P.V_CODE = V.V_CODE
AND V_STATE = 'TN'
AND V_AREACODE = '615'
ORDER BY P_PRICE;
-- Optimized query with 2 indexes, an EXPLICIT JOIN, and a combined WHERE clause
CREATE INDEX P_V_CODE_IDX ON PRODUCT (V_CODE);
CREATE INDEX V_STATE_IDX ON VENDOR (V_STATE, V_AREACODE);
SELECT P_CODE, P_DESCRIPT, P_PRICE, P.V_CODE, V_STATE
FROM PRODUCT P
JOIN VENDOR V ON P.V_CODE = V.V_CODE
WHERE V_STATE = 'TN'
AND V_AREACODE = '615'
ORDER BY P_PRICE;

-- Original Query for Question 6
SELECT
    V.V_NAME AS VendorName,
    P.P_CODE AS ProductCode,
    P.P_DESCRIPT AS ProductDescription,
    C.CUS_LNAME AS CustomerLastName,
    I.INV_NUMBER AS InvoiceNumber,
    L.LINE_NUMBER AS LineNumber
FROM
    VENDOR V
INNER JOIN PRODUCT P ON V.V_CODE = P.V_CODE
INNER JOIN LINE L ON P.P_CODE = L.P_CODE
INNER JOIN INVOICE I ON L.INV_NUMBER = I.INV_NUMBER
INNER JOIN CUSTOMER C ON I.CUS_CODE = C.CUS_CODE
WHERE
    V.V_STATE = 'TN'
    AND V.V_AREACODE = '615'
    AND I.INV_DATE >= '2018-01-01';
-- Optimized query with joins in one order
SELECT
    V.V_NAME AS VendorName,
    P.P_CODE AS ProductCode,
    P.P_DESCRIPT AS ProductDescription,
    C.CUS_LNAME AS CustomerLastName,
    I.INV_NUMBER AS InvoiceNumber,
    L.LINE_NUMBER AS LineNumber
FROM
    VENDOR V
INNER JOIN PRODUCT P ON V.V_CODE = P.V_CODE
INNER JOIN LINE L ON P.P_CODE = L.P_CODE
INNER JOIN INVOICE I ON L.INV_NUMBER = I.INV_NUMBER
INNER JOIN CUSTOMER C ON I.CUS_CODE = C.CUS_CODE
WHERE
    V.V_STATE = 'TN'
    AND V.V_AREACODE = '615'
    AND I.INV_DATE >= '2018-01-01';
-- Optimized query in a different order from previous query
SELECT
    V.V_NAME AS VendorName,
    P.P_CODE AS ProductCode,
    P.P_DESCRIPT AS ProductDescription,
    C.CUS_LNAME AS CustomerLastName,
    I.INV_NUMBER AS InvoiceNumber,
    L.LINE_NUMBER AS LineNumber
FROM
    INVOICE I
INNER JOIN LINE L ON I.INV_NUMBER = L.INV_NUMBER
INNER JOIN PRODUCT P ON L.P_CODE = P.P_CODE
INNER JOIN VENDOR V ON P.V_CODE = V.V_CODE
INNER JOIN CUSTOMER C ON I.CUS_CODE = C.CUS_CODE
WHERE
    V.V_STATE = 'TN'
    AND V.V_AREACODE = '615'
    AND I.INV_DATE >= '2018-01-01';